/*
 * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
    classHeader = "CopyrightHeader.txt"

    parserClass = "io.ballerina.plugins.idea.parser.BallerinaParser"
    parserUtilClass="io.ballerina.plugins.idea.parser.BallerinaParserUtil"

    psiClassPrefix = "Ballerina"
    psiImplClassSuffix = "Impl"
    psiPackage = "io.ballerina.plugins.idea.psi"
    psiImplPackage = "io.ballerina.plugins.idea.psi.impl"
    psiImplUtilClass = "io.ballerina.plugins.idea.psi.impl.BallerinaPsiImplUtil"

    elementTypeHolderClass = "io.ballerina.plugins.idea.psi.BallerinaTypes"
    elementTypeClass = "io.ballerina.plugins.idea.psi.BallerinaCompositeElementType"

    tokenTypeClass = "io.ballerina.plugins.idea.psi.BallerinaTokenType"

    tokens = [

        // Separators
        SEMICOLON           = ';' ;
        COLON               = ':' ;
        DOUBLE_COLON        = '::' ;
        DOT                 = '.' ;
        COMMA               = ',' ;
        LEFT_BRACE          = '{' ;
        RIGHT_BRACE         = '}' ;
        LEFT_PARENTHESIS    = '(' ;
        RIGHT_PARENTHESIS   = ')' ;
        LEFT_BRACKET        = '[' ;
        RIGHT_BRACKET       = ']' ;
        QUESTION_MARK       = '?' ;

        // Arithmetic operators
        ASSIGN              = '=' ;
        ADD                 = '+' ;
        SUB                 = '-' ;
        MUL                 = '*' ;
        DIV                 = '/' ;
        POW                 = '^' ;
        MOD                 = '%';

        // Relational operators
        NOT                 = '!' ;
        EQUAL               = '==' ;
        NOT_EQUAL           = '!=' ;
        REF_EQUAL           = '===' ;
        REF_NOT_EQUAL       = '!==' ;
        GT                  = '>' ;
        LT                  = '<' ;
        GT_EQUAL            = '>=' ;
        LT_EQUAL            = '<=' ;
        AND                 = '&&' ;
        OR                  = '||' ;

        // Additional symbols
        RARROW              = '->' ;
        LARROW              = '<-' ;
        AT                  = '@' ;
        BACKTICK            = '`' ;
        RANGE               = '..' ;
        ELLIPSIS            = '...' ;
        PIPE                = '|' ;
        EQUAL_GT            = '=>' ;

        // Compound Assignment operators.
        COMPOUND_ADD        = '+=' ;
        COMPOUND_SUB        = '-=' ;
        COMPOUND_MUL        = '*=' ;
        COMPOUND_DIV        = '/=' ;

        // Safe assignment operator
        SAFE_ASSIGNMENT     = '=?' ;

        // Post Arithmetic operators.
        INCREMENT           = '++' ;
        DECREMENT           = '--' ;

        LINE_COMMENT        = 'regexp://[^\r\n]*'

        WHITE_SPACE = 'regexp:\s+'
        identifier = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        DECIMAL_INTEGER_LITERAL = "regexp:\d+"
  ]

    extends("(DistinctSimple|Array|Nullable|Union|Group|Tuple|Object|Table|Intersection|InclusiveRecord|ExclusiveRecord)TypeName|BinaryAndExpression") = TypeName

    // This is to identify top level elements in a file.
    implements("(Type|Service|GlobalVariable|Function|Annotation|Constant|Enum)Definition") = "io.ballerina.plugins.idea.psi.impl.BallerinaTopLevelDefinition"

    generateTokenAccessors = true
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                        compilation unit                                                           //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CompilationUnit ::=(ImportDeclaration | NamespaceDeclaration)* (DefinitionWithoutAnnotationAttachments |  DefinitionWithMultipleAnnotationAttachments | DefinitionWithSingleAnnotationAttachment)* <<eof>>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                  import/namespace declarations                                                    //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ImportDeclaration ::= import (OrgName DIV)? CompletePackageName PackageVersion? Alias? SEMICOLON {pin=1}
OrgName ::= identifier
CompletePackageName ::= PackageName (DOT PackageName)* {pin(".*")=1}
PackageName ::= identifier
PackageVersion ::= version VersionPattern {pin=1}
VersionPattern ::= DECIMAL_INTEGER_LITERAL | DECIMAL_FLOATING_POINT_NUMBER | DECIMAL_EXTENDED_FLOATING_POINT_NUMBER
Alias ::= as identifier {pin=1}
NamespaceDeclaration ::= xmlns QUOTED_STRING_LITERAL (as identifier)? SEMICOLON {pin=1}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                        top level definitions                                                      //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DefinitionWithMultipleAnnotationAttachments ::= documentationString? AnnotationAttachment AnnotationAttachment+ Definition {pin=3 elementType=Definition}
DefinitionWithSingleAnnotationAttachment ::= documentationString? AnnotationAttachment Definition {pin=2 elementType=Definition}
DefinitionWithoutAnnotationAttachments ::= documentationString? Definition {pin=2 elementType=Definition}

Definition ::= TypeDefinition | ServiceDefinition | FunctionDefinition | AnnotationDefinition | ConstantDefinition | GlobalVariableDefinition | EnumDefinition {recoverWhile=TopLevelDefinitionRecover}
private TopLevelDefinitionRecover ::= !(MARKDOWN_DOCUMENTATION_LINE_START|PARAMETER_DOCUMENTATION_START
|RETURN_PARAMETER_DOCUMENTATION_START|AT|external|remote|client|abstract|public|type|typedesc|service|listener
|function|enum|annotation|int|float|decimal|boolean|string|byte|map|xml|xmlns|json|table|any|stream|object|record
|channel|const|final|var|future|identifier|'{'|transactional|distinct|readonly)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                         type definitions                                                          //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TypeDefinition ::= public? type identifier TypeBody SEMICOLON {pin=2}
TypeBody ::= CloseRecordTypeBody | OpenRecordTypeBody | ObjectTypeBody | OtherTypeBody

CloseRecordTypeBody ::= record LEFT_CLOSED_RECORD_DELIMITER RecoverableCloseRecordContent RIGHT_CLOSED_RECORD_DELIMITER {pin=2}
RecoverableCloseRecordContent ::= any {pin=1 recoverWhile=RecoverableCloseRecordContentRecover}
private RecoverableCloseRecordContentRecover::= !(RIGHT_CLOSED_RECORD_DELIMITER)

OpenRecordTypeBody ::= record LEFT_BRACE RecoverableOpenRecordContent RIGHT_BRACE {pin=2}
RecoverableOpenRecordContent ::= any {pin=1 recoverWhile=RecoverableOpenRecordContentRecover}
private RecoverableOpenRecordContentRecover::= !(RIGHT_BRACE)

ObjectTypeBody ::= ((client? abstract) | (abstract? client?)) object LEFT_BRACE ObjectBodyContent RIGHT_BRACE {pin=2}
ObjectBodyContent ::= (ObjectMethod | ObjectFieldDefinition | TypeReference)*
ObjectFieldDefinition ::= documentationString? AnnotationAttachment* (public | private)? readonly? TypeName identifier ObjectFieldDefinitionContent (COMMA | SEMICOLON) {pin=6}
ObjectFieldDefinitionContent ::= any {pin=1 recoverWhile=ObjectFieldDefinitionContentRecover}
private ObjectFieldDefinitionContentRecover ::= !(COMMA | SEMICOLON)
TypeReference ::= MUL SimpleTypeName SEMICOLON {pin=1}

// Todo - verify/add others
OtherTypeBody ::= (identifier|QUOTED_STRING_LITERAL|error) RecoverableTypeContent {pin=1}
RecoverableTypeContent ::= any {pin=1 recoverWhile=SimpleTypeContentRecover}
private SimpleTypeContentRecover ::= !(SEMICOLON)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                        service definitions                                                        //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ServiceDefinition ::= service identifier? on RecoverableAttachmentContent ServiceDefinitionBody {pin=3}
RecoverableAttachmentContent ::= identifier {recoverWhile = ServiceDefinitionRecover}
private ServiceDefinitionRecover ::= !(LEFT_BRACE)

ServiceDefinitionBody ::= LEFT_BRACE ObjectMethod* RIGHT_BRACE {pin=1 recoverWhile=RecoverableBodyContentRecover}
ObjectMethod ::= MethodDeclaration | MethodDefinition
MethodDeclaration ::= documentationString? NestedAnnotationAttachment* (public|private)? (remote|resource)? function AnyIdentifierName NestedFunctionSignature SEMICOLON
MethodDefinition ::= documentationString? NestedAnnotationAttachment* (public|private)? (remote|resource)? function AnyIdentifierName NestedFunctionSignature NestedRecoverableBody

NestedFunctionSignature ::= LEFT_PARENTHESIS RecoverableParameterContent RIGHT_PARENTHESIS returns? NestedRecoverableReturnType {pin=1}
NestedRecoverableReturnType ::= identifier {recoverWhile=NestedReturnParamRecover}
private NestedReturnParamRecover ::= !(SEMICOLON | NESTED_LEFT_BRACE)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                        function definitions                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FunctionDefinition ::= (public|private)? remote? transactional? function AnyIdentifierName FunctionSignature FunctionDefinitionBody {pin=4 methods=[getIdentifier]}

AnyIdentifierName ::= identifier
FunctionSignature ::= LEFT_PARENTHESIS RecoverableParameterContent RIGHT_PARENTHESIS returns? RecoverableReturnType {pin=1}
RecoverableParameterContent ::= identifier {recoverWhile=FunctionSignatureRecover}
private FunctionSignatureRecover ::= !(RIGHT_PARENTHESIS)
RecoverableReturnType ::= identifier {recoverWhile=ReturnParamRecover}
private ReturnParamRecover ::= !(EQUAL_GT | ASSIGN | LEFT_BRACE)

FunctionDefinitionBody ::= (ExprFunctionBodySpec SEMICOLON) | (ExternalFunctionBody SEMICOLON) | RecoverableBody
ExprFunctionBodySpec ::= EQUAL_GT identifier {pin=1 recoverWhile=ExprFuncBodyRecover}
private ExprFuncBodyRecover ::= !(SEMICOLON)

ExternalFunctionBody ::= ASSIGN AnnotationAttachment* external {pin=1 recoverWhile=ExternalFuncBodyRecover}
private ExternalFuncBodyRecover ::= !(SEMICOLON)

// IMPORTANT - "RecoverableBody" rule should be used for all the top level definition bodies, for proper grammar recovery.
RecoverableBody ::= LEFT_BRACE RecoverableBodyContent RIGHT_BRACE {pin=1}
RecoverableBodyContent ::= identifier {pin=1 recoverWhile=RecoverableBodyContentRecover}
private RecoverableBodyContentRecover ::= !(RIGHT_BRACE)

// IMPORTANT - "NestedRecoverableBody" rule should be used for all the 1st level definition bodies, for proper grammar recovery.
NestedRecoverableBody ::= NESTED_LEFT_BRACE NestedRecoverableBodyContent NESTED_RIGHT_BRACE {pin=1}
NestedRecoverableBodyContent ::= identifier {pin=1 recoverWhile=NestedRecoverableBodyContentRecover}
private NestedRecoverableBodyContentRecover ::= !(NESTED_RIGHT_BRACE)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                       annotation definitions                                                      //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AnnotationDefinition ::= public? const? annotation RecoverableAnnotationContent SEMICOLON {pin=3}
RecoverableAnnotationContent ::= identifier {recoverWhile=AnnotationDefinitionRecover}
private AnnotationDefinitionRecover ::= !(SEMICOLON)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                     global variable definitions                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GlobalVariableDefinition ::= varDefinition | listenerDefinition | typedVariableDefinition
private varDefinition ::= final? var RecoverableVariableDefinitionContent SEMICOLON {pin=2}
private listenerDefinition ::= public? listener RecoverableVariableDefinitionContent SEMICOLON {pin=2}
private typedVariableDefinition ::= final? TypeName identifier ASSIGN RecoverableVarDefContent SEMICOLON {pin=3}

TypeName ::= TupleTypeName | DistinctSimpleTypeName | GroupTypeName | ArrayTypeName | UnionTypeName | ObjectTypeName | NullableTypeName | InclusiveRecordTypeName | ExclusiveRecordTypeName | IntersectionTypeName | TableTypeName

DistinctSimpleTypeName ::= distinct? SimpleTypeName
SimpleTypeName ::= NULL_LITERAL | any | anydata | handle | never | readonly | ValueTypeName | ReferenceTypeName | typedesc | NilLiteral

ArrayTypeName ::= TypeName (LEFT_BRACKET (IntegerLiteral | MUL)? RIGHT_BRACKET)+
NullableTypeName ::= TypeName <<nullableTypePredicate>> QUESTION_MARK
UnionTypeName ::= TypeName (PIPE TypeName)+
GroupTypeName ::= LEFT_PARENTHESIS <<isGroupType>> TypeName RIGHT_PARENTHESIS {pin=1}
TupleTypeName ::=  LEFT_BRACKET ((TypeName (COMMA TypeName)* (COMMA TupleRestDescriptor)?) | TupleRestDescriptor) RIGHT_BRACKET {pin=1}
ObjectTypeName ::= distinct? ((client? abstract) | (abstract? client?)) readonly? object LEFT_BRACE ObjectBody RIGHT_BRACE {pin=4}
InclusiveRecordTypeName ::=  record RecoverableBody
ExclusiveRecordTypeName ::=  record LEFT_CLOSED_RECORD_DELIMITER RecoverableBodyContent RIGHT_CLOSED_RECORD_DELIMITER
IntersectionTypeName ::= TypeName BIT_AND TypeName {pin=2}
TableTypeName ::= table LT TypeName GT TableKeyConstraint? {pin=1}

TableKeyConstraint ::= TableKeySpecifier | TableKeyTypeConstraint
TableKeySpecifier ::= key LEFT_PARENTHESIS (identifier (COMMA identifier)*)? RIGHT_PARENTHESIS
TableKeyTypeConstraint ::= key LT TypeName GT

ObjectBody ::= {recoverWhile=ObjectBodyRecover}
private ObjectBodyRecover ::= !(RIGHT_BRACE)

TupleRestDescriptor::= TypeName ELLIPSIS
ReferenceTypeName ::= BuiltInReferenceTypeName | UserDefineTypeName
UserDefineTypeName ::= NameReference
ValueTypeName ::=   boolean | int | float | decimal | string | byte
BuiltInReferenceTypeName ::= MapTypeName | FutureTypeName | XmlTypeName | JsonTypeName | StreamTypeName | ServiceTypeName | TypeDescReferenceTypeName | ErrorTypeName | FunctionTypeName

MapTypeName ::= map LT TypeName GT {pin=1}
FutureTypeName ::= future (LT TypeName GT)? {pin=1}
XmlTypeName ::= xml (LT TypeName GT)? {pin=1}
JsonTypeName ::= json
ErrorTypeName ::= error (LT (TypeName | MUL) GT)? {pin=1}
StreamTypeName ::= stream (LT TypeName (COMMA TypeName)? GT)? {pin=1}
FunctionTypeName ::= function
ServiceTypeName ::= service
TypeDescReferenceTypeName ::=  typedesc (LT TypeName GT)? {pin=2}

NilLiteral ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS
IntegerLiteral ::= DECIMAL_INTEGER_LITERAL | HEX_INTEGER_LITERAL

RecoverableVarDefContent ::= identifier {recoverWhile=VarDefExpressionRecover}
private VarDefExpressionRecover ::= !(SEMICOLON)
RecoverableVariableDefinitionContent ::= identifier {recoverWhile=GlobalVariableDefinitionRecover}
private GlobalVariableDefinitionRecover ::= !(SEMICOLON)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                        constant definitions                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ConstantDefinition ::= public? const RecoverableConstantContent SEMICOLON {pin=2}
RecoverableConstantContent ::= identifier {recoverWhile=ConstantDefinitionRecover}
private ConstantDefinitionRecover ::= !(SEMICOLON)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                           enum definitions                                                        //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
EnumDefinition ::= public? enum identifier EnumBody {pin=2 recoverWhile=RecoverableBodyContentRecover}
EnumBody ::= MultiMemberEnumBody | SingleMemberEnumBody | EmptyEnumBody
MultiMemberEnumBody ::= LEFT_BRACE EnumMember (COMMA EnumMember)+ RIGHT_BRACE {pin=3}
SingleMemberEnumBody ::= LEFT_BRACE EnumMember RIGHT_BRACE
EmptyEnumBody ::= LEFT_BRACE RIGHT_BRACE
EnumMember ::= documentationString? AnnotationAttachment* identifier RecoverableEnumContent {pin=3}
RecoverableEnumContent ::= ASSIGN {pin=1 recoverWhile=EnumContentRecover}
private EnumContentRecover ::= !(COMMA|RIGHT_BRACE)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                             annotations                                                           //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AnnotationAttachment ::= AT NameReference RecoverableBody? {pin=1}
NameReference ::= PackageReference identifier | identifier
PackageReference ::= identifier COLON {pin=2}

NestedAnnotationAttachment ::= AT NameReference NestedRecoverableBody? {pin=1}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                        markdown documentation                                                     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
documentationString ::= documentationLine+ parameterDocumentationLine* returnParameterDocumentationLine? deprecatedParametersDocumentationLine? deprecatedAnnotationDocumentationLine?
documentationLine ::= MARKDOWN_DOCUMENTATION_LINE_START documentationContent {pin=1}
parameterDocumentationLine ::= parameterDocumentation parameterDescription*
returnParameterDocumentationLine ::= returnParameterDocumentation returnParameterDescription*
deprecatedAnnotationDocumentationLine ::= deprecatedAnnotationDocumentation deprecateAnnotationDescriptionLine*
deprecatedParametersDocumentationLine ::= deprecatedParametersDocumentation parameterDocumentationLine+
documentationContent ::= documentationText?
parameterDescription ::= MARKDOWN_DOCUMENTATION_LINE_START documentationText?
returnParameterDescription ::= MARKDOWN_DOCUMENTATION_LINE_START documentationText?
deprecateAnnotationDescriptionLine ::= MARKDOWN_DOCUMENTATION_LINE_START documentationText?

//TODO: Fix documentation reference capturing.
documentationText ::= (documentationReference | referenceType | backtickedBlock | documentationTextContent)+
documentationReference ::= referenceType SINGLE_BACKTICK_CONTENT SINGLE_BACKTICK_MARKDOWN_END {pin=1}
referenceType ::= DOCTYPE | DOCSERVICE | DOCVARIABLE | DOCVAR | DOCANNOTATION | DOCMODULE | DOCFUNCTION | DOCPARAMETER | DOCCONST

parameterDocumentation ::= PARAMETER_DOCUMENTATION_START PARAMETER_NAME DESCRIPTION_SEPARATOR documentationText? {pin=3}
returnParameterDocumentation ::= RETURN_PARAMETER_DOCUMENTATION_START docParameterDescription
deprecatedAnnotationDocumentation ::= DEPRECATED_DOCUMENTATION
deprecatedParametersDocumentation ::= DEPRECATED_PARAMETER_DOCUMENTATION
docParameterDescription ::= documentationText?

backtickedBlock ::=  tripleBacktickedBlock | doubleBacktickedBlock | singleBacktickedBlock
singleBacktickedBlock ::= SINGLE_BACKTICK_MARKDOWN_START SINGLE_BACKTICK_CONTENT? SINGLE_BACKTICK_MARKDOWN_END {pin=1}
doubleBacktickedBlock ::= DOUBLE_BACKTICK_MARKDOWN_START DOUBLE_BACKTICK_CONTENT? DOUBLE_BACKTICK_MARKDOWN_END {pin=1}
tripleBacktickedBlock ::= TRIPLE_BACKTICK_MARKDOWN_START TRIPLE_BACKTICK_CONTENT? TRIPLE_BACKTICK_MARKDOWN_END {pin=1}

documentationTextContent ::= MARKDOWN_DOCUMENTATION_TEXT | DOCUMENTATION_ESCAPED_CHARACTERS

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                             Unused tokens                                                         //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private unusedTokens ::= !(BOOLEAN_LITERAL|DECIMAL_INTEGER_LITERAL|HEX_INTEGER_LITERAL|OCTAL_INTEGER_LITERAL
|BINARY_INTEGER_LITERAL|NULL_LITERAL|DECIMAL_FLOATING_POINT_NUMBER|HEXADECIMAL_FLOATING_POINT_LITERAL|int|string
|float|decimal|boolean|byte|any|anydata|json|xml|xmlns|map|table|function|stream|'{'|'['|'}'|';'|typedesc|future|var
|while|match|foreach|continue|break|fork|try|throw|return|abort|aborted|committed|retry|fail|lock|transaction|if
|forever|object|service|check|checkpanic|error|panic|from|worker|record|identifier|wait|with|where|TYPE_PARAMETER
|TYPE_FIELD|SYNCRARROW|start|source|retries|parameter|onretry|OBJECT_INIT|new|select|let|is|in|finally|ELVIS|else
|do|catch|typeof|trap|flush|XML_ALL_CHAR|STRING_TEMPLATE_TEXT|STRING_TEMPLATE_LITERAL_START|STRING_TEMPLATE_LITERAL_END
|STRING_TEMPLATE_EXPRESSION_START|STRING_TEMPLATE_EXPRESSION_END|XML_LITERAL_START|XML_LITERAL_END|BITAND|BITXOR
|BIT_COMPLEMENT|COMPOUND_BIT_OR|COMPOUND_BIT_AND|COMPOUND_BIT_XOR|ANNOTATION_ACCESS|OPTIONAL_FIELD_ACCESS
|COMPOUND_LEFT_SHIFT|COMPOUND_RIGHT_SHIFT|HALF_OPEN_RANGE|DEFAULT|BASE_16_BLOB_LITERAL|BASE_64_BLOB_LITERAL
|COMPOUND_LOGICAL_SHIFT|IGNORED_LEFT_BRACE|IGNORED_RIGHT_BRACE|limit|JOIN_EQUALS|commit|rollback|conflict)
